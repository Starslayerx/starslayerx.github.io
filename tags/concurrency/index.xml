<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Concurrency on Starslayerx' Blog</title><link>https://starslayerx.github.io/tags/concurrency/</link><description>Recent content in Concurrency on Starslayerx' Blog</description><generator>Hugo</generator><language>en-US</language><lastBuildDate>Fri, 29 Aug 2025 08:00:00 +0800</lastBuildDate><atom:link href="https://starslayerx.github.io/tags/concurrency/index.xml" rel="self" type="application/rss+xml"/><item><title>Asyncio vs Gevents in Python</title><link>https://starslayerx.github.io/posts/asyncio-vs-gevents-in-python/</link><pubDate>Fri, 29 Aug 2025 08:00:00 +0800</pubDate><guid>https://starslayerx.github.io/posts/asyncio-vs-gevents-in-python/</guid><description>&lt;p>python 中 asyncio 和 gevent 是两种协程(在一个线程内实现并发)的实现, 这篇文章对比介绍这两者实现.&lt;br>
下面先介绍一下基础概念:&lt;/p>
&lt;h3 id="coroutines-协程">Coroutines 协程&lt;/h3>
&lt;p>在 Python 中, 协程是可以暂停和继续运行的函数, 使得其是否适合并发编程. 定义使用 &lt;code>async def&lt;/code> 语法, 协程运行编写非阻塞的操作. 在协程内, &lt;code>await&lt;/code> 关键字用于暂停执行, 直到给定的任务完成, 从而运行其他协程在此其间并发运行.&lt;/p></description></item></channel></rss>