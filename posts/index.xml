<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on Starslayerx' Blog</title><link>https://starslayerx.github.io/posts/</link><description>Recent content in Posts on Starslayerx' Blog</description><generator>Hugo</generator><language>en-US</language><lastBuildDate>Wed, 10 Sep 2025 08:00:00 +0800</lastBuildDate><atom:link href="https://starslayerx.github.io/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>The Evolution of Coding in the AI Era</title><link>https://starslayerx.github.io/posts/the-evolution-of-coding-in-the-ai-era/</link><pubDate>Wed, 10 Sep 2025 08:00:00 +0800</pubDate><guid>https://starslayerx.github.io/posts/the-evolution-of-coding-in-the-ai-era/</guid><description>&lt;p>文章翻译: &lt;a href="https://thebootstrappedfounder.com/the-evolution-of-coding-in-the-ai-era/">The Evolution of Coding in the AI Era&lt;/a>&lt;/p>
&lt;h2 id="人工智能时代的编码演变">人工智能时代的编码演变&lt;/h2>
&lt;p>2024 年 8 月 23 日 · Arvid Kahl
阅读时间：约 8 分钟&lt;/p>
&lt;p>几年前，我还是一个完全不同的程序员。巅峰时我能轻松浏览文档并主要写出能用的代码；状态差的时候，我会为了一个笔误或古怪的 bug 折腾好几个小时，毫无结果。&lt;/p></description></item><item><title>Dealing With Grabage in Python</title><link>https://starslayerx.github.io/posts/dealing-with-grabage-in-python/</link><pubDate>Mon, 08 Sep 2025 08:00:00 +0800</pubDate><guid>https://starslayerx.github.io/posts/dealing-with-grabage-in-python/</guid><description>&lt;h2 id="grabage-collection-in-python">Grabage Collection In Python&lt;/h2>
&lt;p>本篇文章介绍 Python 中的 Grabage Collection (GC) 机制介绍&lt;/p>
&lt;h3 id="whats-python-object">What&amp;rsquo;s Python Object?&lt;/h3>
&lt;p>Python 对象中有三样东西: 类型(Type)、值(value)和引用计数(reference count), 当给变量命名时, Python 会自动检测其类型, 值在定义对象时声明, 引用计数是指该对象名称的数量.&lt;/p></description></item><item><title>How AI Assistants Make Precise Edits to Your Files</title><link>https://starslayerx.github.io/posts/how-ai-assistants-make-precise-edits-to-your-files/</link><pubDate>Tue, 02 Sep 2025 08:00:00 +0800</pubDate><guid>https://starslayerx.github.io/posts/how-ai-assistants-make-precise-edits-to-your-files/</guid><description>&lt;p>之前的文章介绍了如何制作一个基本的 AI 编程助手, 今天更近一步, 探讨 AI 助手如何对文件进行精确的修改.&lt;/p>
&lt;blockquote>
&lt;p>实际的 AI Agent 不会读取所有的项目代码, 一般只会读取当前文件的代码, 当需要时才会去读取相关的代码文件. 然而, 输出也不会输出要修改的整个文件的代码, 因为这样输出不仅很慢, 同时成本也很高, 会有大量重复代码导致浪费(以 deepseek 为例, 输出 token 的价格是输入 token 价格的3倍, 是缓存命中输入 token 价格的24倍!), 因此一般是让模型输出要修改的代码和修改后的代码.&lt;/p></description></item><item><title>Make an AI Coding Agent in python</title><link>https://starslayerx.github.io/posts/make-an-ai-coding-agent-in-python/</link><pubDate>Mon, 01 Sep 2025 08:00:00 +0800</pubDate><guid>https://starslayerx.github.io/posts/make-an-ai-coding-agent-in-python/</guid><description>&lt;p>这篇文件介绍如何使用 Python 制作一个基础的 AI 编程助手&lt;/p>
&lt;h2 id="minimal-ai-coding-agent">Minimal AI Coding Agent&lt;/h2>
&lt;p>下面是一个 AI Coding Agent 至少需要的功能&lt;/p>
&lt;ol>
&lt;li>Chat loop 对话循环&lt;/li>
&lt;li>Call an LLM 调用大语言模型&lt;/li>
&lt;li>Add tools to call 增加工具调用&lt;/li>
&lt;li>Handle tool request 处理工具调用请求&lt;/li>
&lt;/ol>
&lt;h3 id="step-1-chat-loop">Step 1: Chat Loop&lt;/h3>
&lt;p>首先, 聊天循环一直循环等待用户输入, Python 的 &amp;ldquo;input&amp;rdquo; 方法可以获取用户输入&lt;/p></description></item><item><title>KMP Algorithm</title><link>https://starslayerx.github.io/posts/kmp-algorithm/</link><pubDate>Sun, 31 Aug 2025 08:00:00 +0800</pubDate><guid>https://starslayerx.github.io/posts/kmp-algorithm/</guid><description>&lt;h2 id="kmp-算法">KMP 算法&lt;/h2>
&lt;h3 id="思想">思想&lt;/h3>
&lt;p>KMP 算法, 全程 Knuth-Morris-Pratt 算法, 是一种高效的字符串匹配算法. 它的核心思想是:&lt;br>
在匹配过程中, 当发生文本串(text)与模式串(pattern)不匹配时, 能够利用已匹配过的部分信息, 智能地移动模式串, 从而避免从头开始匹配, 达到提高匹配效率的目的.&lt;/p></description></item><item><title>Redis Ordered Set</title><link>https://starslayerx.github.io/posts/redis-ordered-set/</link><pubDate>Sat, 30 Aug 2025 08:00:00 +0800</pubDate><guid>https://starslayerx.github.io/posts/redis-ordered-set/</guid><description>&lt;p>Redis 的有序集和(ordered set)同时具有&amp;quot;有序&amp;quot;和&amp;quot;集和&amp;quot;两种性质, 这种结构中每个元素都由一个成员和一个与成员相关联的分值组成, 其中成员与字符串方式存储, 而分值以64位双精度浮点数格式存储.&lt;/p></description></item><item><title>Asyncio vs Gevents in Python</title><link>https://starslayerx.github.io/posts/asyncio-vs-gevents-in-python/</link><pubDate>Fri, 29 Aug 2025 08:00:00 +0800</pubDate><guid>https://starslayerx.github.io/posts/asyncio-vs-gevents-in-python/</guid><description>&lt;p>python 中 asyncio 和 gevent 是两种协程(在一个线程内实现并发)的实现, 这篇文章对比介绍这两者实现.&lt;br>
下面先介绍一下基础概念:&lt;/p>
&lt;h3 id="coroutines-协程">Coroutines 协程&lt;/h3>
&lt;p>在 Python 中, 协程是可以暂停和继续运行的函数, 使得其是否适合并发编程. 定义使用 &lt;code>async def&lt;/code> 语法, 协程运行编写非阻塞的操作. 在协程内, &lt;code>await&lt;/code> 关键字用于暂停执行, 直到给定的任务完成, 从而运行其他协程在此其间并发运行.&lt;/p></description></item><item><title>Prompt Organization</title><link>https://starslayerx.github.io/posts/prompt-organization/</link><pubDate>Thu, 28 Aug 2025 08:00:00 +0800</pubDate><guid>https://starslayerx.github.io/posts/prompt-organization/</guid><description>&lt;p>这篇文章旨在介绍 Python 中常用的提示词组织方式&lt;/p>
&lt;h3 id="f-string">f-string&lt;/h3>
&lt;p>使用 f 字符串填充变量得到提示词&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-Python" data-lang="Python">&lt;span class="line">&lt;span class="cl">&lt;span class="k">def&lt;/span> &lt;span class="nf">get_prompt&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">query&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nb">str&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="nb">list&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nb">dict&lt;/span>&lt;span class="p">]:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">SYSTEM_PROMPT&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="sa">f&lt;/span>&lt;span class="s2">&amp;#34;&amp;#34;&amp;#34;...
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2">...
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2">多行提示词, 也可以填充变量
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2">&amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">USER_PROMPT&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="sa">f&lt;/span>&lt;span class="s2">&amp;#34;&amp;#34;&amp;#34;INPUT:
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2">&lt;/span>&lt;span class="si">{&lt;/span>&lt;span class="n">query&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2">....
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2">&amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="p">[&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>&lt;span class="s2">&amp;#34;role&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;system&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;content&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">SYSTEM_PROMPT&lt;/span>&lt;span class="p">},&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>&lt;span class="s2">&amp;#34;role&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;user&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;content&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">USER_PROMPT&lt;/span>&lt;span class="p">},&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>这种方法实现简单, 速度快, 但是:&lt;/p>
&lt;ol>
&lt;li>多行字符串由于填充变量的需要, 需写在函数内, 导致代码格式混乱
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-Python" data-lang="Python">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 实际上, 多行字符串还可以这样实现, 但也不太时候提示词太多的时候, 但这样代码格式会更加优雅&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">system_prompt&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="sa">f&lt;/span>&lt;span class="s2">&amp;#34;你是一名&lt;/span>&lt;span class="si">{&lt;/span>&lt;span class="n">role&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">负责...&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="sa">f&lt;/span>&lt;span class="s2">&amp;#34;具体规则:&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="sa">f&lt;/span>&lt;span class="s2">&amp;#34;1. ....&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="sa">f&lt;/span>&lt;span class="s2">&amp;#34;2. ....&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>上面这种方法会将多行字符串合并, 注意不要加逗号, 不然就变成元组了&lt;/li>
&lt;li>通过代码构造提示词, 任何修改都需要修改代码, 扩展性差&lt;/li>
&lt;/ol>
&lt;h3 id="stringtemplate">string.Template&lt;/h3>
&lt;p>使用 Python 元素字符串模板&lt;/p></description></item><item><title>From Python to Go</title><link>https://starslayerx.github.io/posts/from-python-to-go/</link><pubDate>Wed, 27 Aug 2025 08:00:00 +0800</pubDate><guid>https://starslayerx.github.io/posts/from-python-to-go/</guid><description>&lt;p>&lt;a href="https://telemetryharbor.com/blog/from-python-to-go-why-we-rewrote-our-ingest-pipeline-at-telemetry-harbor/">From Python to Go: Why We Rewrote Our Ingest Pipeline at Telemetry Harbor&lt;/a>&lt;/p>
&lt;p>我们将 Telemetry Harbor 的摄取管道从 Python FastAPI 重写为 Go，原因是遇到了严重的性能瓶颈。迁移后，效率提升了 10 倍，数据完整性因严格类型检查而得到加强，系统也拥有了稳定、可扩展的高并发时间序列数据摄取基础。&lt;/p></description></item><item><title>Redis Set</title><link>https://starslayerx.github.io/posts/redis-set/</link><pubDate>Tue, 26 Aug 2025 08:00:00 +0800</pubDate><guid>https://starslayerx.github.io/posts/redis-set/</guid><description>&lt;p>Redis 的集和 set 键允许用户将任意多个不同的元素存储到集和中, 既可以是文本数据, 也可以是二进制数据. 其与列表有以下两个明显的区别:&lt;/p>
&lt;ul>
&lt;li>列表可以存储重复元素, 而集和只存储非重复元素&lt;/li>
&lt;li>列表以有序方式存储元素, 而集和则以无序方式存储元素&lt;/li>
&lt;/ul>
&lt;p>下面介绍结合键的各个命令&lt;/p></description></item><item><title>Documenting REST APIs with OpenAPI</title><link>https://starslayerx.github.io/posts/documenting-rest-apis-with-openapi/</link><pubDate>Mon, 25 Aug 2025 08:00:00 +0800</pubDate><guid>https://starslayerx.github.io/posts/documenting-rest-apis-with-openapi/</guid><description>&lt;p>本章介绍如何使用 OpenAPI 来为 API 编写文档. OpenAPI 是描述 RESTful API 最流行的标准, 拥有丰富的生态系统, 可以用于测试、验证和可视化 API. 大多数编程语言都支持 OpenAPI 规范的库.&lt;/p>
&lt;p>OpenAPI 使用 JSON Schema 来描述 API 的结构和模型, 因此首先介绍 JSON Schema 的工作原理. JSON Schema 是一种用于定义 JSON 文档结构的规范, 包括文档中值的类型和格式.&lt;/p></description></item><item><title>Redis List</title><link>https://starslayerx.github.io/posts/redis-list/</link><pubDate>Sun, 24 Aug 2025 08:00:00 +0800</pubDate><guid>https://starslayerx.github.io/posts/redis-list/</guid><description>&lt;h2 id="list-列表">List 列表&lt;/h2>
&lt;p>Redis 的列表是一种线性的有序结构, 可以按照元素被推入列表的顺序来存储元素, 这些元素即可以是文字顺序, 也可以是二进制顺序, 且元素可重复出现.&lt;/p>
&lt;ul>
&lt;li>
&lt;p>LPUSH: 将元素推入列表左端&lt;/p></description></item><item><title>Rust Alternaitve Tools</title><link>https://starslayerx.github.io/posts/rust-alternaitve-tools/</link><pubDate>Sat, 23 Aug 2025 08:00:00 +0800</pubDate><guid>https://starslayerx.github.io/posts/rust-alternaitve-tools/</guid><description>&lt;p>常用工具的 rust 替代品.&lt;/p>
&lt;h3 id="introduction">Introduction&lt;/h3>
&lt;p>在 Unix 生态中, 许多命令行工具都是用 C 编写的, 经过几十年的优化, 性能和稳定性都非常优秀.
然而, 近年来, Rust 以其安全性、内存管理优势和现代化开发体验, 成为系统级工具开发的理想选择.&lt;/p></description></item><item><title>Tokei</title><link>https://starslayerx.github.io/posts/tokei/</link><pubDate>Fri, 22 Aug 2025 08:00:00 +0800</pubDate><guid>https://starslayerx.github.io/posts/tokei/</guid><description>&lt;h3 id="tokei-介绍">Tokei 介绍&lt;/h3>
&lt;p>&lt;a href="https://github.com/XAMPPRocky/tokei">Tokei&lt;/a>是一款 Rust 编写的开源工具, 用于统计项目代码行数, 支持上百种语言, 能够扫描整个代码库, 包括:&lt;/p>
&lt;ul>
&lt;li>语言&lt;/li>
&lt;li>文件数量&lt;/li>
&lt;li>代码行数&lt;/li>
&lt;li>注释行数&lt;/li>
&lt;li>空行数&lt;/li>
&lt;/ul>
&lt;p>得益于 Rust 的高性能实现, Tokei 即使在超大规模代码库中也能保持极快的统计速度&lt;br>
(Rust 轮子真不错)&lt;/p></description></item><item><title>Redis Hash</title><link>https://starslayerx.github.io/posts/redis-hash/</link><pubDate>Thu, 21 Aug 2025 08:00:00 +0800</pubDate><guid>https://starslayerx.github.io/posts/redis-hash/</guid><description>&lt;h2 id="散列">散列&lt;/h2>
&lt;p>Redis 散列键 hash key 会将一个键和一个散列在数据库里关联起来, 散列中可以存任意多个字段 field.
与字符串一样, 散列字段和值既可以是文本数据, 也可以是二进制数据.&lt;/p></description></item><item><title>HTTP Methods, Status Codes and Payloads</title><link>https://starslayerx.github.io/posts/http-methods-status-codes-and-payloads/</link><pubDate>Wed, 20 Aug 2025 08:00:00 +0800</pubDate><guid>https://starslayerx.github.io/posts/http-methods-status-codes-and-payloads/</guid><description>&lt;p>本篇文章基于 REST api 介绍HTTP请求方法、HTTP响应码和API数据载荷, 是之前介绍 REST 那篇文章的延伸&lt;/p>
&lt;h2 id="http-status-codes">HTTP Status Codes&lt;/h2>
&lt;ul>
&lt;li>1xx group: Signals that an operation is in progress&lt;/li>
&lt;li>2xx group: Signals that a request was successfully processed&lt;/li>
&lt;li>3xx group: Signals that a resource has been moved to a new location&lt;/li>
&lt;li>4xx group: Signals that someting was wrong with the request&lt;/li>
&lt;li>5xx group: Signals that there was an error while processing the request&lt;/li>
&lt;/ul>
&lt;p>在之前文章中, 定义的 HTTP status code 如下:&lt;/p></description></item><item><title>Redis String</title><link>https://starslayerx.github.io/posts/redis-string/</link><pubDate>Tue, 19 Aug 2025 08:00:00 +0800</pubDate><guid>https://starslayerx.github.io/posts/redis-string/</guid><description>&lt;p>介绍Redis中的字符串键&lt;/p>
&lt;h2 id="字符串">字符串&lt;/h2>
&lt;p>字符串建是 Redis 最基本的键值对类型, 这种类型的键值对会在数据库中把单独的一个值关联起来, 被关联的键和值可以为文本, 也可以是图片, 视屏, 音频等二进制数据.&lt;/p></description></item><item><title>IEEE-754 Introduce</title><link>https://starslayerx.github.io/posts/ieee-754-introduce/</link><pubDate>Mon, 18 Aug 2025 08:00:00 +0800</pubDate><guid>https://starslayerx.github.io/posts/ieee-754-introduce/</guid><description>&lt;p>IEEE 754 标准数值类型及分类&lt;/p>
&lt;h2 id="整数-integer">整数 Integer&lt;/h2>
&lt;p>整数是没有小数部分的值, 在计算机内通常有两种表示方式:&lt;/p>
&lt;ul>
&lt;li>有符号整数: 可以表示正数和负数, 最常用的是二补码表示. 例如 8 位二进制的范围为[-2^7, 2^7-1]&lt;/li>
&lt;li>无符号整数: 仅表示非负数, 8 位二进制的范围为 [0, 2^8-1]&lt;/li>
&lt;/ul>
&lt;p>其中补码(Two&amp;rsquo;s Complement)用于表示负数&lt;/p></description></item><item><title>Designing and Building REST APIs</title><link>https://starslayerx.github.io/posts/designing-and-building-rest-apis/</link><pubDate>Sun, 17 Aug 2025 08:00:00 +0800</pubDate><guid>https://starslayerx.github.io/posts/designing-and-building-rest-apis/</guid><description>&lt;p>这篇文章延续之前微服务的内容, 将介绍关于 REST API 的以下几个方面:&lt;/p>
&lt;ul>
&lt;li>REST API 的设计原则&lt;/li>
&lt;li>Richardson maturity model (RMM) 如何帮助理解 REST 的优势和设计原则&lt;/li>
&lt;li>REST API 中资源(resource)和端点(endpoints)设计的概念&lt;/li>
&lt;/ul>
&lt;p>表达性状态转移 representational state transfer (REST) 描述了一种通过网络进行通信的应用程序架构风格.
最初, REST 的概念包含了一组用于设计分布式、可扩展 Web 应用的约束条件.
随着时间推移, 出现了更为细致的协议和规范, 为 REST API 的设计提供了明确的指导方针.
如今, REST 已经成为构建 Web API 的最流行选择.&lt;/p></description></item><item><title>Intorduce UUID</title><link>https://starslayerx.github.io/posts/intorduce-uuid/</link><pubDate>Sat, 16 Aug 2025 08:00:00 +0800</pubDate><guid>https://starslayerx.github.io/posts/intorduce-uuid/</guid><description>&lt;p>UUID(Universally Unique Identifier, 通用唯一标识符) 是一种标准化的128位标识符, 用于在分布式系统中生成几乎不会重复的唯一 ID. 最早于 IETF 制定为 RFC 4122 标准, 保证在不同机器、不同时间生成的 ID 也能保持全局唯一.&lt;/p></description></item><item><title>Microservice with FastAPI</title><link>https://starslayerx.github.io/posts/microservice-with-fastapi/</link><pubDate>Fri, 15 Aug 2025 08:00:00 +0800</pubDate><guid>https://starslayerx.github.io/posts/microservice-with-fastapi/</guid><description>&lt;h2 id="what-are-microservices-">What are microservices ?&lt;/h2>
&lt;p>什么是微服务? 微服务可以有多种不同的定义方式, 具体取决于希望强调微服务架构的哪个方面, 不同作者会给出略有不同但相关的定义&lt;/p>
&lt;p>Sam Newman, 微服务领域最有影响力的作者之一, 给出了一个极简的定义:&lt;/p></description></item><item><title>Python Generics</title><link>https://starslayerx.github.io/posts/python-generics/</link><pubDate>Thu, 14 Aug 2025 08:00:00 +0800</pubDate><guid>https://starslayerx.github.io/posts/python-generics/</guid><description>&lt;p>本篇文件介绍 Python 中的 泛型(Generics)&lt;/p>
&lt;h3 id="intro">Intro&lt;/h3>
&lt;p>在没有泛型的情况下, 会遇上以下几个问题:&lt;/p>
&lt;ol>
&lt;li>
&lt;p>难以表达意图&lt;br>
假设你编写了一个函数, 它接受一个列表, 并返回列表中的第一个元素.
在不使用类型提示的情况下, 这个函数可以处理任何类型的列表, 但我们无法在函数签名中表达&amp;quot;返回的元素的类型与列表中的元素类型相同&amp;quot;这个意图&lt;/p></description></item><item><title>Python Strings</title><link>https://starslayerx.github.io/posts/python-strings/</link><pubDate>Wed, 13 Aug 2025 08:00:00 +0800</pubDate><guid>https://starslayerx.github.io/posts/python-strings/</guid><description>&lt;p>这篇文章总结一下 Python 中字符串的类型&lt;/p>
&lt;h3 id="unicode-string-字符串">Unicode String 字符串&lt;/h3>
&lt;p>u 在 Python3 中是多余的, 因为所有的普通字符串默认都是 Unicode, 但在 Python2 中, u 用来显示的表示 Unicode 字符串, 现在保留这个是为了向后兼容&lt;/p></description></item><item><title>FastAPI Response Model</title><link>https://starslayerx.github.io/posts/fastapi-response-model/</link><pubDate>Tue, 12 Aug 2025 08:00:00 +0800</pubDate><guid>https://starslayerx.github.io/posts/fastapi-response-model/</guid><description>&lt;p>本篇文章介绍 FastAPI 的返回类型 response model&lt;/p>
&lt;p>可以在返回函数的类型注解中声明该接口的响应数据类型&lt;/p>
&lt;p>类型注解的用法和输入数据参数一样, 可以使用:&lt;/p>
&lt;ul>
&lt;li>Pydantic 模型&lt;/li>
&lt;li>list 列表&lt;/li>
&lt;li>dict 字典&lt;/li>
&lt;li>scalar 标量值 (int, bool &amp;hellip;)&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-Python" data-lang="Python">&lt;span class="line">&lt;span class="cl">&lt;span class="nd">@app.post&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;/items/&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">async&lt;/span> &lt;span class="k">def&lt;/span> &lt;span class="nf">create_item&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">item&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">Item&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="n">Item&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">...&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nd">@app.get&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;/items/&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">async&lt;/span> &lt;span class="k">def&lt;/span> &lt;span class="nf">read_items&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="nb">list&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">Item&lt;/span>&lt;span class="p">]:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">...&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>FastAPI 会使用返回类型完成一下事情:&lt;/p></description></item><item><title>Fastapi Cookie and Header Parameters</title><link>https://starslayerx.github.io/posts/fastapi-cookie-and-header-parameters/</link><pubDate>Mon, 11 Aug 2025 08:00:00 +0800</pubDate><guid>https://starslayerx.github.io/posts/fastapi-cookie-and-header-parameters/</guid><description>&lt;p>这篇文章介绍 Fastapi 的 Cookie 和 Header 参数&lt;/p>
&lt;h3 id="cookie-parameters">Cookie Parameters&lt;/h3>
&lt;p>通过定义 &lt;code>Query&lt;/code> 和 &lt;code>Path&lt;/code> 参数一样定义 &lt;code>Cookie&lt;/code> 参数&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-Python" data-lang="Python">&lt;span class="line">&lt;span class="cl">&lt;span class="kn">from&lt;/span> &lt;span class="nn">typing&lt;/span> &lt;span class="n">Annotated&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">from&lt;/span> &lt;span class="nn">fastapi&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">Cookie&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">FastAPI&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">app&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">FastAPI&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nd">@app.get&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;/items/&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">async&lt;/span> &lt;span class="k">def&lt;/span> &lt;span class="nf">read_items&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">ads_id&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">Annotated&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nb">str&lt;/span> &lt;span class="o">|&lt;/span> &lt;span class="kc">None&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">Cookie&lt;/span>&lt;span class="p">()]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">None&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="s2">&amp;#34;ads_id&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">ads_id&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="cookie-parameters-models">Cookie Parameters Models&lt;/h4>
&lt;p>如果有一组相关的 cookies, 可以使用 Pydantic model 来声明.&lt;/p>
&lt;p>这样可以在多个部分复用这个模型, 同时还能一次性为所有参数声明验证规则和元数据.&lt;/p></description></item><item><title>Python Function Parameters</title><link>https://starslayerx.github.io/posts/python-function-parameters/</link><pubDate>Sun, 10 Aug 2025 08:00:00 +0800</pubDate><guid>https://starslayerx.github.io/posts/python-function-parameters/</guid><description>&lt;p>今天是周日, 简单写点吧, 简单总结一下 Python 中函数参数&lt;/p>
&lt;h2 id="python-function-parameters">Python Function Parameters&lt;/h2>
&lt;p>Python 函数参数机制非常灵活丰富, 理解各种参数类型及其用法对于写出优雅、易维护的代码非常重要. 本文将介绍 Python 中函数参数的种类与用法, 并详细讲解 Python 3.8 引入的参数分隔符 / 和 *, 帮助你更好地设计函数接口.&lt;/p></description></item><item><title>FastAPI Body Advanced Uses</title><link>https://starslayerx.github.io/posts/fastapi-body-advanced-uses/</link><pubDate>Sat, 09 Aug 2025 08:00:00 +0800</pubDate><guid>https://starslayerx.github.io/posts/fastapi-body-advanced-uses/</guid><description>&lt;p>本篇文章介绍 FastAPI Request Body 的进阶用法&lt;/p>
&lt;h3 id="body---multiple-parameters">Body - Multiple Parameters&lt;/h3>
&lt;p>首先, 可以将&lt;code>Path&lt;/code>, &lt;code>Query&lt;/code> 和 request body 参数声明自由的写在一起&lt;/p>
&lt;p>对于 request body 参数可以是可选的, 并且可设置为默认的 &lt;code>None&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-Python" data-lang="Python">&lt;span class="line">&lt;span class="cl">&lt;span class="kn">from&lt;/span> &lt;span class="nn">typing&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">Annotated&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">from&lt;/span> &lt;span class="nn">fastapi&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">FastAPI&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">Path&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">from&lt;/span> &lt;span class="nn">pydantic&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">BaseModel&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">app&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">FastAPI&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">Item&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">BaseModel&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">name&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nb">str&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">description&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nb">str&lt;/span> &lt;span class="o">|&lt;/span> &lt;span class="kc">None&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">None&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">price&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nb">float&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">tax&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nb">float&lt;/span> &lt;span class="o">|&lt;/span> &lt;span class="kc">None&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">None&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nd">@app.put&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;/items/&lt;/span>&lt;span class="si">{item_id}&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">async&lt;/span> &lt;span class="k">def&lt;/span> &lt;span class="nf">update_item&lt;/span>&lt;span class="p">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">item_id&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">Annotated&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nb">int&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">Path&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">title&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;The ID of the item to get&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">ge&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">le&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">1000&lt;/span>&lt;span class="p">)],&lt;/span> &lt;span class="c1"># Path&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">q&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nb">str&lt;/span> &lt;span class="o">|&lt;/span> &lt;span class="kc">None&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">None&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="c1"># Query&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">item&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">Item&lt;/span> &lt;span class="o">|&lt;/span> &lt;span class="kc">None&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">None&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="c1"># body&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">results&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="s2">&amp;#34;item_id&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">item_id&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="n">q&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">results&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">update&lt;/span>&lt;span class="p">({&lt;/span>&lt;span class="s2">&amp;#34;q&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">q&lt;/span>&lt;span class="p">})&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="n">item&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">results&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">update&lt;/span>&lt;span class="p">({&lt;/span>&lt;span class="s2">&amp;#34;item&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">item&lt;/span>&lt;span class="p">})&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">results&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="multiple-body-parameters-多参数请求体">Multiple body parameters 多参数请求体&lt;/h4>
&lt;p>在上面例子中, FastAPI 期望一个包含 &lt;code>Item&lt;/code> 属性的 JSON body, 例如&lt;/p></description></item><item><title>Git Whitelist</title><link>https://starslayerx.github.io/posts/git-whitelist/</link><pubDate>Fri, 08 Aug 2025 08:00:00 +0800</pubDate><guid>https://starslayerx.github.io/posts/git-whitelist/</guid><description>&lt;p>有时你开启了一个新的项目, 运行了 &lt;code>cargo init&lt;/code>、&lt;code>uv init&lt;/code> 和 &lt;code>go mod init&lt;/code>&lt;/p>
&lt;p>这些命令创建了工作所需要的必要文件, 同时也在 &lt;code>.gitignore&lt;/code> 文件中添加了以下内容&lt;/p>
&lt;pre tabindex="0">&lt;code>target
__pycache__
bin
&lt;/code>&lt;/pre>&lt;p>一切都很顺利, 你继续开发新功能, 等到时机成熟时就将项目发布到了 Git 托管平台上&lt;/p></description></item><item><title>FastAPI Parameters and Validations</title><link>https://starslayerx.github.io/posts/fastapi-parameters-and-validations/</link><pubDate>Thu, 07 Aug 2025 08:00:00 +0800</pubDate><guid>https://starslayerx.github.io/posts/fastapi-parameters-and-validations/</guid><description>&lt;p>这篇文章介绍 FastAPI 中的参数验证功能&lt;/p>
&lt;h3 id="query-parameters-and-string-validations">Query Parameters and String Validations&lt;/h3>
&lt;p>FastAPI 允许为参数声明额外的信息和验证规则&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="kn">from&lt;/span> &lt;span class="nn">fastapi&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">FastAPI&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">app&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">FastAPI&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nd">@app.get&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;/items/&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">async&lt;/span> &lt;span class="k">def&lt;/span> &lt;span class="nf">read_items&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">q&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nb">str&lt;/span> &lt;span class="o">|&lt;/span> &lt;span class="kc">None&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">None&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">results&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="s2">&amp;#34;items&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">[{&lt;/span>&lt;span class="s2">&amp;#34;item_id&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;Foo&amp;#34;&lt;/span>&lt;span class="p">},&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="s2">&amp;#34;item_id&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;Bar&amp;#34;&lt;/span>&lt;span class="p">}]}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="n">q&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">results&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">update&lt;/span>&lt;span class="p">({&lt;/span>&lt;span class="s2">&amp;#34;q&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">q&lt;/span>&lt;span class="p">})&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">results&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>q&lt;/code> 是类型为 &lt;code>str | None&lt;/code> 的查询参数, 这意味着它可以是字符串, 也可以是 &lt;code>None&lt;/code>. 其默认值是 &lt;code>None&lt;/code>, 因此 FastAPI 会识别它为“可选参数”&lt;/p></description></item><item><title>FastAPI Parameters</title><link>https://starslayerx.github.io/posts/fastapi-parameters/</link><pubDate>Wed, 06 Aug 2025 08:00:00 +0800</pubDate><guid>https://starslayerx.github.io/posts/fastapi-parameters/</guid><description>&lt;p>FastAPI 是一个现代、快速（高性能）的 Python Web 框架, 它自动处理参数的解析、验证和文档生成&lt;/p>
&lt;p>本文将介绍 FastAPI 中三类最常用的参数: &lt;strong>路径参数 (Path Parameters)&lt;/strong>、&lt;strong>查询参数 (Query Parameters)&lt;/strong> 和 &lt;strong>请求体(Request Body)&lt;/strong> 的用法与原理&lt;/p></description></item><item><title>Python Tricks</title><link>https://starslayerx.github.io/posts/python-tricks/</link><pubDate>Tue, 05 Aug 2025 08:00:00 +0800</pubDate><guid>https://starslayerx.github.io/posts/python-tricks/</guid><description>&lt;h3 id="1-the-self-replicating-trick">1. The Self-Replicating Trick&lt;/h3>
&lt;p>将一个含有空列表的列表乘5, 得到有5个空列表的列表&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="n">x&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[[]]&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="mi">5&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">x&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>[[], [], [], [], []]&lt;/p>&lt;/blockquote>
&lt;p>当使用&lt;code>.append(&amp;quot;x&amp;quot;)&lt;/code>方法时, 所有列表都被修改&lt;/p></description></item><item><title>Executing arbitrary Python code from a comment</title><link>https://starslayerx.github.io/posts/executing-arbitrary-python-code-from-a-comment/</link><pubDate>Mon, 04 Aug 2025 08:00:00 +0800</pubDate><guid>https://starslayerx.github.io/posts/executing-arbitrary-python-code-from-a-comment/</guid><description>&lt;p>通过注释执行任意Python代码&lt;/p>
&lt;h3 id="问题描述">问题描述&lt;/h3>
&lt;p>Q: 只能控制一行的.py代码中注释的内容(\n\r均会被替换为空字符), 如何执行任意代码?&lt;br>
A: 在注释#中, 构造一个.zip 文件, python 会将该内容当成一个zip包执行, 触发任意代码执行&lt;/p></description></item><item><title>How FastAPI Works</title><link>https://starslayerx.github.io/posts/how-fastapi-works/</link><pubDate>Sun, 03 Aug 2025 08:30:00 +0800</pubDate><guid>https://starslayerx.github.io/posts/how-fastapi-works/</guid><description>&lt;p>FastAPI 的工作原理: 从 routing 到 lifecycle 以及在现实中的使用&lt;/p>
&lt;h3 id="fastapi">FastAPI&lt;/h3>
&lt;p>FastAPI 是一个现代的 Python Web 框架, 注重&lt;strong>高性能&lt;/strong>和&lt;strong>开发效率&lt;/strong>. 旨在帮助开发者编写结构清晰、可靠的API, 同时尽量减少样板代码 (boilerplate)&lt;/p></description></item><item><title>"Chaos Enginnering" In Partice</title><link>https://starslayerx.github.io/posts/chaos-enginnering-in-partice/</link><pubDate>Sat, 02 Aug 2025 08:00:00 +0800</pubDate><guid>https://starslayerx.github.io/posts/chaos-enginnering-in-partice/</guid><description>&lt;p>记录一个小故事 HHH&lt;/p>
&lt;h3 id="混沌工程实践">“混沌工程”实践&lt;/h3>
&lt;p>项目延期，开发说时间不够干不完
老板：“不够就招人”&lt;/p>
&lt;p>今天偶然听到旁边同事给新来的员工做code review：&lt;/p>
&lt;ul>
&lt;li>Q：你这个代码不要这样写，因为&amp;hellip;&amp;hellip;&lt;/li>
&lt;li>A：哦，懂了&lt;/li>
&lt;li>Q：唉？你这个 &lt;code>.idea/&lt;/code> 文件是什么？&lt;/li>
&lt;li>A：啊？我也不知道&lt;/li>
&lt;li>我：不是???(一脸震惊)&lt;/li>
&lt;/ul>
&lt;p>理想：Plan Do Check Act&lt;/p></description></item><item><title>Blaugust</title><link>https://starslayerx.github.io/posts/blaugust/</link><pubDate>Fri, 01 Aug 2025 08:00:00 +0800</pubDate><guid>https://starslayerx.github.io/posts/blaugust/</guid><description>&lt;p>🎈 Oh hello, August! It&amp;rsquo;s time for Blaugust.&lt;/p>
&lt;h3 id="blaugust-begins-writing-as-a-develpoer-habit">Blaugust Begins: Writing as a Develpoer Habit&lt;/h3>
&lt;p>This year, I&amp;rsquo;m joining &lt;strong>Blaugust&lt;/strong> - a month-long blogging challenge that encourage consistent writing throught August.
For develpoers, blogging isn&amp;rsquo;t just sharing, it&amp;rsquo;s about orgainzing thoughts, documenting ideas, and creating term references.&lt;/p>
&lt;h3 id="what-i-plan-to-write">What I Plan to Write&lt;/h3>
&lt;p>Here is what I aim to cover this month:&lt;/p>
&lt;ul>
&lt;li>Daily dev partices: tools, logging, project structure patterns&lt;/li>
&lt;li>Python ecosystem: FastAPI, Pydantic, Langchain, Pytest and more&lt;/li>
&lt;li>AI project logs: buliding AI agents and orchestration workflows&lt;/li>
&lt;li>Architecture notes: async patterns, micorservice, data flow&lt;/li>
&lt;li>Learning notes &amp;amp; translation of blogs: deep dive into code and quality tech atricles&lt;/li>
&lt;/ul>
&lt;p>I&amp;rsquo;m not necessarily writing one post per day - some days I might write multiple posts in advance - but the goal is to publish daily with a focus on consistency, reusability, and value.&lt;/p></description></item><item><title>Dive into DeepLearning - 02 - Preliminaries</title><link>https://starslayerx.github.io/posts/dive-into-deeplearning-02-preliminaries/</link><pubDate>Sun, 21 Mar 2021 05:20:08 +0800</pubDate><guid>https://starslayerx.github.io/posts/dive-into-deeplearning-02-preliminaries/</guid><description>&lt;ul>
&lt;li>Course Note: d2l-video-05 - 线性代数&lt;/li>
&lt;li>Jupyter Notebook: chapter_preliminaries/linear-algebra.ipynb&lt;/li>
&lt;/ul>
&lt;p>预备知识中 Liner Algebra 的部分&lt;/p>
&lt;h3 id="线性代数">线性代数&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>Scalars 标量: 指只有一个元素的张量 tensors&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-Python" data-lang="Python">&lt;span class="line">&lt;span class="cl">&lt;span class="kn">import&lt;/span> &lt;span class="nn">torch&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">x&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">torch&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">tensor&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mf">3.0&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1"># scalar&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">y&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">torch&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">tensor&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mf">2.0&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>Vectors 向量: 可以视作标量构成的列表&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-Python" data-lang="Python">&lt;span class="line">&lt;span class="cl">&lt;span class="n">x&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">torch&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">arange&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">x&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="c1"># 通过张量索引访问任一元素&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">len&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1"># 访问张量长度&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">x&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">shape&lt;/span> &lt;span class="c1"># torch.Size([4]) 只有一个轴的张量, 形状只有一个元素&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>Matrices 矩阵: 类似向量的推广, 可以构建更多轴的数据结构&lt;/p></description></item><item><title>Dive into DeepLearning - 01 - Preliminaries</title><link>https://starslayerx.github.io/posts/dive-into-deeplearning-01-preliminaries/</link><pubDate>Sun, 21 Mar 2021 05:05:25 +0800</pubDate><guid>https://starslayerx.github.io/posts/dive-into-deeplearning-01-preliminaries/</guid><description>&lt;ul>
&lt;li>Course Note: d2l-video-04 - 数据操作+数据预处理&lt;/li>
&lt;li>Jupyter Notebook: chapter_preliminaries/pandas.ipynb&lt;/li>
&lt;/ul>
&lt;p>预备知识中 Data Manipulation 和 Data Preprocessing 的部分&lt;/p>
&lt;h3 id="介绍">介绍&lt;/h3>
&lt;p>&lt;strong>N 纬数组介绍&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>0-d (标量)&lt;/p>
&lt;pre tabindex="0">&lt;code>1.0 
&lt;/code>&lt;/pre>&lt;p>一个类别&lt;/p>
&lt;/li>
&lt;li>
&lt;p>1-d (向量)&lt;/p>
&lt;pre tabindex="0">&lt;code>[1.0, 2.7, 3.4] 
&lt;/code>&lt;/pre>&lt;p>一个特征向量&lt;/p>
&lt;/li>
&lt;li>
&lt;p>2-d (矩阵)&lt;/p>
&lt;pre tabindex="0">&lt;code>[[1.0, 2.7, 3.4],
 [1.0, 2.7, 3.4],
 [1.0, 2.7, 3.4]]
&lt;/code>&lt;/pre>&lt;p>一个样本 - 特征矩阵&lt;/p></description></item></channel></rss>