<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Docker on Starslayerx' Blog</title><link>https://starslayerx.github.io/tags/docker/</link><description>Recent content in Docker on Starslayerx' Blog</description><generator>Hugo</generator><language>en-US</language><lastBuildDate>Tue, 23 Sep 2025 08:00:00 +0800</lastBuildDate><atom:link href="https://starslayerx.github.io/tags/docker/index.xml" rel="self" type="application/rss+xml"/><item><title>Docker - Containers</title><link>https://starslayerx.github.io/posts/docker-containers/</link><pubDate>Tue, 23 Sep 2025 08:00:00 +0800</pubDate><guid>https://starslayerx.github.io/posts/docker-containers/</guid><description>&lt;p&gt;像 VMware 或 KVM 这类虚拟化系统, 他们运行在虚拟化层上运行完整的 Linux 内核与操作系统.
这种架构能提供极强的隔离性, 因为每个虚拟机都搭载独立的内核, 这些内核各自运行在硬甲虚拟化层之上的隔离内存空间中.&lt;/p&gt;</description></item><item><title>Docker - Images</title><link>https://starslayerx.github.io/posts/docker-images/</link><pubDate>Sun, 07 Sep 2025 08:00:00 +0800</pubDate><guid>https://starslayerx.github.io/posts/docker-images/</guid><description>&lt;p&gt;每个 Linux 容器都基于一个镜像, 镜像重新构建运行中容器的底层定义.
要启动一个容器, 需要下载公共镜像或者创建自己的镜像.
每个镜像由一个或多个相互关联的文件系统层 layer 组成, 这些层通常与创建镜像的每个构建步骤大致一一对应.&lt;/p&gt;</description></item><item><title>Docker - Workflow</title><link>https://starslayerx.github.io/posts/docker-workflow/</link><pubDate>Sat, 06 Sep 2025 08:00:00 +0800</pubDate><guid>https://starslayerx.github.io/posts/docker-workflow/</guid><description>&lt;h2 id="the-docker-workflow"&gt;The Docker Workflow&lt;/h2&gt;
&lt;p&gt;这篇文章介绍 Docker 工作流&lt;/p&gt;
&lt;h3 id="revision-control-版本控制"&gt;Revision Control 版本控制&lt;/h3&gt;
&lt;p&gt;Docker 有两种版本控制方式. 一个是用来跟踪文件系统层 layers (每个镜像的组成), 另一个是 tagging 标签系统.&lt;/p&gt;
&lt;h3 id="filesystem-layers-文件系统层"&gt;Filesystem layers 文件系统层&lt;/h3&gt;
&lt;p&gt;Linux 容器由堆叠文件系统层组成, 每一层由一个唯一的哈希标记, 每次 build 都在之前的修改之上.
这意味着, 每次 build 只需要重新构建修改过的层.
这节省了时间和网络带宽.&lt;/p&gt;</description></item><item><title>Docker - Images and Registeries</title><link>https://starslayerx.github.io/posts/docker-images-and-registeries/</link><pubDate>Fri, 05 Sep 2025 08:00:00 +0800</pubDate><guid>https://starslayerx.github.io/posts/docker-images-and-registeries/</guid><description>&lt;h3 id="the-docker-images--docker-镜像"&gt;The Docker Images | Docker 镜像&lt;/h3&gt;
&lt;p&gt;Image、OCI Image、Docker Image、Container Image 都是指同一个概念镜像的不容叫法.&lt;/p&gt;
&lt;p&gt;镜像是一个轻量、只读且不可变的蓝图, 指定了应用运行所谁要的一切, 以及在 Docker 系统上如何运行.
就像是一份配方, 包括所有必要的原料, 诸如依赖、配置、环境设置和你的应用代码, 以及确保应用每次都能稳定运行的详细指令.&lt;/p&gt;</description></item><item><title>Docker - Engine and Netowrking</title><link>https://starslayerx.github.io/posts/docker-engine-and-netowrking/</link><pubDate>Thu, 04 Sep 2025 08:00:00 +0800</pubDate><guid>https://starslayerx.github.io/posts/docker-engine-and-netowrking/</guid><description>&lt;p&gt;Docker 引擎(Docker Engine), 顾名思意，是 Docker 的核心.
它为 Docker 提供动力, 并承担所有繁重的工作.
本文将深入探讨这一关键组件的内部运作, 以便了解 Docker 在内核下是如何工作的.&lt;/p&gt;</description></item><item><title>Docker - History</title><link>https://starslayerx.github.io/posts/docker-history/</link><pubDate>Wed, 03 Sep 2025 08:00:00 +0800</pubDate><guid>https://starslayerx.github.io/posts/docker-history/</guid><description>&lt;h2 id="the-docker-story---part1-docker-history"&gt;The Docker Story - Part1: Docker History&lt;/h2&gt;
&lt;p&gt;docCloud - 也就是开发 Docker 的公司, 最初是一家 PaaS(平台即服务)公司, 他们在 PaaS 领域并没有太大的成功, 但他们构建了一个可以无缝管理客户系统与架构的工具: Docker. 2013 年, 他们决定放弃 PaaS 服务, 将全部精力投入到 Docker 这款产品上.&lt;/p&gt;</description></item></channel></rss>